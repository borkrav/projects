#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding=2, set = 0) uniform CameraProperties
{
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 modelIT;
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadNV vec3 hitValue;


//RNG code taken from here
//http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/

//will probably need to generate some RNG on the CPU and use a buffer
//probably not good enough for the monte-carlo path trace simulation

uint rng_state;

uint rand_xorshift(){
	rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}



void main() 
{
    

    vec4 origin = cam.viewInverse*vec4(0,0,0,1);


	uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

	vec3 finalColor = vec3(0,0,0);

	rng_state = wang_hash(gl_LaunchIDNV.x + gl_LaunchIDNV.y);

	//simple anti-aliasing, 4 rays per pixel
	for (int i = 0; i < 4; i++){

		
		float offset1 = float(rand_xorshift()) * (1.0 / 4294967296.0);
		float offset2 = float(rand_xorshift()) * (1.0 / 4294967296.0);


		const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(offset1, offset2);
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
		vec2 d = inUV * 2.0 - 1.0;
		vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
		vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

		traceNV(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/,
		0 /*missIndex*/, origin.xyz, tmin, direction.xyz, tmax, 0 /*payload*/);

		finalColor += hitValue/4;

	}

	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(finalColor, 0.0));
}